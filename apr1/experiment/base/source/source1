# task 1 - copy 1
'.platform-win32, .platform-win32 .atom-workspace':
  'ctrl-c':       'clipboard-history:copy'
  'ctrl-shift-v': 'clipboard-history:paste'

#task 2 - copy 1
{
  'label': 'Copy',
  'command': 'clipboard-history:copy'
},

#task 3 - copy 2
'submenu': [
  { 'label': 'Copy', 'command': 'clipboard-history:copy' }
  { 'label': 'Paste', 'command': 'clipboard-history:paste' }
]

#task 5 - copy 3
enableCopyLine:
  type: 'boolean'
  default: true
  title: 'Enable Copy Line'
  description: 'Copy the whole line when no selection'


#task 7 - copy 1
"name": "clipboard-history",
"author": {
  "name": "Group G"
},

#task 7 - copy 3
editor: null
forceClear: false
workspaceView: atom.views.getView(atom.workspace)

# Public methods
###############################
initialize: (@history, @editorView) ->
  super
  @addClass('clipboard-history')
  @_handleEvents()

#task 9 - copy 1
selectItemView: (view) ->
  # Default behaviour
  return unless view.length
  @list.find('.selected').removeClass('selected')
  view.addClass 'selected'
  @scrollToItemView view

  # Show preview
  @list.find('.preview').addClass('hidden')
  preview = view.find '.preview'
  if preview.length isnt 0 and preview.text().length > 65 and atom.config.get 'clipboard-history.showSnippetForLargeItems'
    if view.position().top isnt 0
      preview.css({ 'top': (view.position().top - 5) + 'px'})
    preview.removeClass 'hidden'

#task 10 - copy 1
confirmed: (item) ->
  if item.clearHistory?
    @history = []
    @forceClear = true
  else
    @history.splice(@history.indexOf(item), 1)
    @history.push(item)
    atom.clipboard.write(item.text)
    atom.workspace.getActivePaneItem().insertText item.text,
      select: true
  @cancel()
